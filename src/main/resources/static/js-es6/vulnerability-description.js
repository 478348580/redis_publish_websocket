    var urlParams = getParams(window.location.href), // url路径参数
        moduleId = urlParams.modID, // 组件id
        projectId = "", // 项目id，用于面包屑导航
        projectName = "", // 项目名，用于面包屑导航
        projectVersion = "", // 项目版本号，用于面包屑导航
        triggerOption = "", // 是否选中可触发，trigger为可触发，all为全部
        bugLevel = ""; // 漏洞的高中低
    init();

    // 点击可触发漏洞or全部漏洞时
    $('.padding-tital').on('click', function() {
        $(this).parents('.bug').find('.filter-icon-div').removeClass('filter-icon-div');
        triggerOption = $(this).parents('tr').attr('data-triggerType');
        bugLevel = "";
        $("input:radio[value='"+triggerOption+"']")[0].checked = true;
        BugTableRefresth();
    })
    // 筛选高中低
    $('.filter-icon-td').parent('tr').on('click', function() {
        var _icon = $(this).children('td:first-child').children('div');
        if(_icon.hasClass('filter-icon-div')){
            $('.filter-icon-div').removeClass('filter-icon-div');
            bugLevel = "";
        }else{
            $('.filter-icon-div').removeClass('filter-icon-div');
            _icon.addClass('filter-icon-div');
            bugLevel = $(this).attr('data-level');
        }
        triggerOption = $(this).attr('data-triggerType');
        $("input:radio[value='"+triggerOption+"']")[0].checked = true;
        BugTableRefresth();
    })
    // tab切换
    $('.qtractor ul li').on('click', function() {
        $(this).addClass('active').siblings('li').removeClass('active');
        window.location.hash = 'show=' + $('.Loophole').eq($(this).index()).attr('class').split('Loophole ')[1];
        responseHashChange();
    });
    // 项目表搜索
    $('#project-btn').on('click', function() {
        $("#ProjectTable").bootstrapTable('refresh');
    })
    // 漏洞表搜索
    $('#bug-search').on('click', function() {
        $('#ModuleBugTable').bootstrapTable('refresh');
    })

    // 初始化
    function init() {
        urlParams.proID ? projectId = urlParams.proID : projectId = "";
        urlParams.type ? triggerOption = urlParams.type : triggerOption = "all"; // 根据url.type判断选中可触发漏洞or全部漏洞
        urlParams.level ? bugLevel = urlParams.level : bugLevel = ""; // 根据url.level判断等级
        $("input:radio[value='"+triggerOption+"']")[0].checked = true; // 给默认值选中radio
        moduleInfo();
        responseHashChange();
        funnelIcon();
    }
    // 从项目页跳转至组件页，漏洞图标默认选中样式
    function funnelIcon() {
        if(urlParams.type){
            var mark = "";
            urlParams.type === "trigger" ? mark = "trigger" : mark = "all";
            $('.filter-icon-td div').removeClass('filter-icon-div');
            switch(urlParams.level){
                case urlParams.level :
                    bugLevel = urlParams.level;
                    $('.filter-' + mark).find('.tr-' + urlParams.level).find('.filter-icon-td div').addClass('filter-icon-div');
                    break;
                default:
                    bugLevel = "";
                    $('.filter-icon-td div').removeClass('filter-icon-div');
                    break;
            }
        }
    }

    // 组件信息
    function moduleInfo() {
        $.ajax({
            type: "GET",
            url: "/module/getModuleContent",
            data: {moduleid: moduleId},
            dataType: "json",
            success: function (data) {
                data = transformObjKey(data, '');

                // 显示组件链接，名称，版本，更新日期
                var module_url = data.moduleurl;
                var module_name = data.modulename;
                var module_version = data.moduleversion;
                var nowdate = data.modulenowtime.split('T')[0];
                var module_count = Number( data.modulebugcount );
                var href = "";

                $('.module-herf').html("<a href='" + module_url + "' target='_blank'>" + module_name + "</a>");
                $('.left-item-href').html("<a href='" + module_url + "' target='_blank'>" + module_url + "</a>");
                $('.left-item-name').html(module_name);
                $('.left-item-version').html(module_version);
                $('.left-item-update').html(nowdate);
                $('.Loophole-known').find('.Loophole-item-name span').html(module_name);
                $('.Loophole-known').find('.Loophole-item-name .edition').html(module_version);
                $('.Loophole-known').find('.text1').html(module_count + "个");
                // n个漏洞
                $('.bug-number').text(module_count);
                // 面包屑
                if( projectId !== ""){
                    $.ajax({
                        url: "/project/getProjectInfo",
                        type: "GET",
                        data: { "projectId": projectId },
                        dataType: "json",
                        success: function(data){
                            data = transformObjKey(data, '_');
                            projectName = data.project_name;
                            projectVersion = data.project_version;
                            href = "<li><a href='./CodeSecurityAnalysis28.html?proID=" + urlParams.proID + "'>" + projectName + " " + projectVersion + "</a></li>" + "<li>" + module_name + " " + module_version + "</li>";
                            $('.directory-address').append(href);
                        }
                    })
                }else{
                     href = "<li>" + module_name + " " + module_version + "</li>";
                    $('.directory-address').append(href);
                }

                // 建议更新
                var module_upversion = data.moduleupversion || "暂无";
                var module_updescribe = data.moduleupdescribe || "";
                var update_date = data.moduleupdatetime.split('T')[0] || "";
                $('.Loophole-update .upVersion').html(module_upversion);
                $('.Loophole-update .upScribe').html(module_updescribe);
                $('.Loophole-update .upTime').html(update_date);
                //最新版本
                var module_newestversion = data.modulenewestversion || "暂无";
                var module_newestdescribe = data.modulenewestdescribe || "";
                var newest_date = data.modulenewesttime.split('T')[0] || "";
                $('.Loophole-uptodate').find('.upVersion').html(module_newestversion);
                $('.Loophole-uptodate').find('.upScribe').html(module_newestdescribe);
                $('.Loophole-uptodate').find('.upTime').html(newest_date);

                var tbh = Number(data.triggerablebughigh),
                    tbm = Number(data.triggerablebugmiddle),
                    tbl = Number(data.triggerablebuglow),
                    tbo = Number(data.triggerablebugother),
                    bh = Number(data.bughigh),
                    bm = Number(data.bugmiddle),
                    bl = Number(data.buglow),
                    bo = Number(data.bugother);
                var max1, max2, tbh_html, tbm_html, tbl_html, tbo_html, bh_html, bm_html, bl_html, bo_html;
                max1 = Math.max.apply(null, [tbh, tbm, tbl, tbo]);
                max2 = Math.max.apply(null, [bh, bm, bl, bo]);
                triggerableBug();
                allBug();
                /*可触发漏洞*/
                function triggerableBug() {
                    if( max1 === 0){
                        tbh_html = "<div class='progressHigh'></div><span class='progressbar-num'>" + 0 + "</span>";
                        tbm_html = "<div class='progressMedium'></div><span class='progressbar-num'>" + 0 + "</span>";
                        tbl_html = "<div class='progressLow'></div><span class='progressbar-num'>" + 0 + "</span>";
                        tbo_html = "<div class='progressOther'></div><span class='progressbar-num'>" + 0 + "</span>";
                    }else{
                        tbh_html = "<div class='progressHigh' style='width: " + 75 * tbh / max1 + "%;'></div><span class='progressbar-num'>" + tbh + "</span>";
                        tbm_html = "<div class='progressMedium' style='width: " + 75 * tbm/max1 + "%;'></div><span class='progressbar-num'>" + tbm + "</span>";
                        tbl_html = "<div class='progressLow' style='width:" + 75 * tbl/max1 + "%;'></div><span class='progressbar-num'>" + tbl + "</span>";
                        tbo_html = "<div class='progressOther' style='width:" + 75 * tbo/max1 + "%;'></div><span class='progressbar-num'>" + tbo + "</span>";
                    }
                    $(".triggerable-bug-high").append(tbh_html);
                    $(".triggerable-bug-middle").append(tbm_html);
                    $(".triggerable-bug-low").append(tbl_html);
                    $(".triggerable-bug-other").append(tbo_html);
                }
                /*所有漏洞*/
                function allBug() {
                    if( max2 === 0){
                        bh_html = "<div class='progressHigh'></div><span class='progressbar-num'>" + 0 + "</span>";
                        bm_html = "<div class='progressMedium'></div><span class='progressbar-num'>" + 0 + "</span>";
                        bl_html = "<div class='progressLow'></div><span class='progressbar-num'>" + 0 + "</span>";
                        bo_html = "<div class='progressOther'></div><span class='progressbar-num'>" + 0 + "</span>";
                    }else{
                        bh_html = "<div class='progressHigh' style='width: " + 75 * bh/max2 + "%;'></div><span class='progressbar-num'>" + bh + "</span>";
                        bm_html = "<div class='progressMedium' style='width: " + 75 * bm/max2 + "%;'></div><span class='progressbar-num'>" + bm + "</span>";
                        bl_html = "<div class='progressLow' style='width: " + 75 * bl/max2 + "%;'></div><span class='progressbar-num'>" + bl + "</span>";
                        bo_html = "<div class='progressOther' style='width:" + 75 * bo/max2 + "%;'></div><span class='progressbar-num'>" + bo + "</span>";
                    }
                    $(".bug-high").append(bh_html);
                    $(".bug-middle").append(bm_html);
                    $(".bug-low").append(bl_html);
                    $(".bug-other").append(bo_html);
                }
            }
        })
    }
    // hash变化触发tab切换
    function responseHashChange() {
        var showTab = hash('show');
        if (showTab) {
            $('.Loophole').hide();
            var name = '.Loophole.' + showTab;
            $(name).show();
            $(".nav-"+showTab).addClass('active').siblings('li').removeClass('active');
            switch(showTab){
                case "project":
                    projectList();
                    break;
                case "bug":
                    moduleBugList();
                    break;
            }
        } else {
            $('.Loophole:first').show();
            projectList();
        }
    };
    // 项目表
    function projectList() {
        $("#ProjectTable").bootstrapTable({
            url: '/module/getProjectListByModuleId',    //'../json/affected-projects.json',http://localhost:3000/table
            queryParamsType: '', //默认值为 'limit' ,在默认情况下 传给服务端的参数为：offset,limit,sort
            queryParams: function (params) {
                return {
                    moduleId: moduleId,//项目名
                    key: $('#projectSearchInput').val(),
                    limit: params.pageSize,
                    page: --params.pageNumber
                }
            },
            method: "get",
            locale: 'zh-CN',
            totalField: 'total',
            pagination: true,
            // pageSize: 10,
            sidePagination: "server",
            paginationPreText: "上一页",
            paginationNextText: "下一页",
            paginationLoop: false,
            cache: false,
            classes: 'table table-hover right-table', //按钮样式
            undefinedText: "",
            columns: [
                {
                    title: '项目名称',
                    field: 'project_name',
                    align: 'center',
                    formatter: function (value, row, index) {
                        value = value || "";
                        var version = row["project_version"] || "";
                        return "<a class='user-management' href='CodeSecurityAnalysis28.html?proID=" + row["project_id"] + "' style='margin-left: 20px;'>" + value + "</a>" + "<span class='project-name-label'>" + version + "</span>";
                    },
                },
                {
                    title: '类型',
                    field: 'project_type',
                    align: 'center',
                    formatter: function (value, row, index) {
                        //图片类型
                        if(value){
                            var allImage = value;
                            var numImage = allImage.split(",");
                            var html = "";
                            for (var i = 0; i < numImage.length; i++) {
                                html = html + "<img class='icon-img' src='../assets/icon/" + numImage[i].toLowerCase() + "-icon.png' alt=''>";
                            }
                            return html;
                        }
                    },
                },
                {
                    title: '检测时间',
                    field: 'analysis_time',
                    align: 'center',
                    formatter: function(value) {
                        if(value){
                            return value.split('T')[0];
                        }
                    }
                },
                {
                    title: '<span title="漏洞涉及函数已被项目程序调用的漏洞">可触发漏洞</span>',
                    align: 'center',
                    field: 'triggerable_bug_high',
                    class: 'module-table4 col-bug col-trigger',
                    formatter: function (value, row, index) {
                        var html;
                        var H = "<a class='user-management' href='CodeSecurityAnalysis28.html?proID=" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelH triggerH'>" + row["triggerable_bug_high"] + "</span></a>";
                        var M = "<a class='user-management' href='CodeSecurityAnalysis28.html?proID=" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelM triggerM'>" + row["triggerable_bug_middle"] + "</span></a>";
                        var L = "<a class='user-management' href='CodeSecurityAnalysis28.htmlproID=?" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelL triggerL'>" + row["triggerable_bug_low"] + "</span></a>";
                        var O = "<a class='user-management' href='CodeSecurityAnalysis28.htmlproID=?" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelO triggerO'>" + row["triggerable_bug_other"] + "</span></a>";
                        if (Number(row["triggerable_bug_high"]) === 0) {
                            H = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["triggerable_bug_middle"]) === 0) {
                            M = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["triggerable_bug_low"]) === 0) {
                            L = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["triggerable_bug_other"]) === 0) {
                            O = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        html = "<div class='trigger_num'>" + H + M + L + O;
                        return "<div class='bugLevel' data-bugId='" + row["module_id"] + "'>" + html + "</div>";
                    }
                },
                {
                    title: '所有漏洞',
                    align: 'center',
                    field: 'bug_high',
                    class: 'module-table5 col-bug col-all',
                    formatter: function (value, row, index) {
                        var H = "<a class='user-management' href='CodeSecurityAnalysis28.html?proID=" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelH allH'>" + row["bug_high"] + "</span></a>";
                        var M = "<a class='user-management' href='CodeSecurityAnalysis28.htmlproID=?" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelM allM'>" + row["bug_middle"] + "</span></a>";
                        var L = "<a class='user-management' href='CodeSecurityAnalysis28.htmlproID=?" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelL allL'>" + row["bug_low"] + "</span></a>";
                        var O = "<a class='user-management' href='CodeSecurityAnalysis28.htmlproID=?" + row["project_id"] + "#show=bug'>" + "<span class='loopholes labelO allO'>" + row["bug_other"] + "</span></a>";
                        if (Number(row["bug_high"]) === 0) {
                            H = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["bug_middle"]) === 0) {
                            M = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["bug_low"]) === 0) {
                            L = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        if (Number(row["bug_other"]) === 0) {
                            O = "<span class='loopholes displaynone'>&nbsp;</span>";
                        }
                        var html = "<div class='all_num'>" + H + M + L + O + "</div>";
                        return "<div class='bugLevel' data-bugId='" + row["module_id"] + "'>" + html + "</div>";
                    }
                },
            ],
            responseHandler: function(res){
                res.rows = [];
                if(res.data.rows){
                    for(var i=0; i<res.data.rows.length; i++){
                        res.rows[i] = transformObjKey(res.data.rows[i], '_');
                    }
                }
                res.total = res.data.totalSize || 0;
                delete res.data.totalSize;
                return res;
            },
        })
    }
    // 漏洞表
    function moduleBugList() {
        $('#ModuleBugTable').bootstrapTable({
            url: '/bug/getModuleBugList',
            queryParamsType: '',              //默认值为 'limit' ,在默认情况下 传给服务端的参数为：offset,limit,sort
            queryParams: function (params) {
                return {
                    triggerType: triggerOption === "trigger" ? true : "",
                    level: bugLevel ? bugLevel : "",
                    module_id: moduleId,
                    key: $('#bugSearchInput').val(),
                    limit: params.pageSize,
                    page: --params.pageNumber
                }
            },
            method: "get",
            locale: 'zh-CN',
            totalField: 'total',
            pagination: true,
            // pageSize: 10,
            sidePagination: "server",
            paginationPreText: "上一页",
            paginationNextText: "下一页",
            paginationLoop: false,
            cache: false,
            classes: 'table table-hover right-table',//按钮样式
            undefinedText: "",
            columns: [
                {
                    title: '',
                    align: 'right',
                    field: 'bug_category',
                    formatter: function(value, row, index) {
                        if(value){
                            return "<span class='ldID " + value.toLowerCase() +"'>"+value+"</span>";
                        }
                    }
                },
                {
                    title: '漏洞名称',
                    align: 'left',
                    field: 'bug_name',
                    formatter:function (value, row, index) {
                        value = value || "";
                        return "<a class='user-management' href='affected-projects.html?bugID=" + row["bug_id"] +"'>" + value + "</a>";
                    }
                },
                {
                    title: '发布时间',
                    align: 'center',
                    field: 'bug_releasedate',
                    formatter: function(value) {
                        if(value){
                            return value.split('T')[0];
                        }
                    }
                },
                {
                    title: '影响范围',
                    align: 'center',
                    field: 'bug_effect_count',
                    formatter: function(value, row, index) {
                        if (value){
                            return "<a class='user-management'><span class='Sphere'>" + row["bug_effect_count"] + "</span></a>";
                        }
                    }
                },
                {
                    title: '类型',
                    align: 'center',
                    field: 'bug_type',
                },
                {
                    title: '严重程度',
                    align: 'center',
                    field: 'big_score',
                    formatter: function(value, row, index) {
                        var Num = row["big_score"] * 1;
                        var levelNum = row["big_score"];
                        var last = "' role='progressbar' aria-valuenow='" + Num +
                            "' aria-valuemin='0' aria-valuemax='100' style='width: " + Num*10 + "%;'>&nbsp;</div>&nbsp;</div>";
                        if (Num >= 8) {
                            var schedule = "<div class='progressBar' style='margin-left: 10px;'><div class='progressHigh" + last + "";
                        } else if (Num >= 4 && Num < 8) {
                            schedule = "<div class='progressBar' style='margin-left: 10px;'><div class='progressMedium" + last + "";
                        } else if (0 < Num && Num< 4) {
                            schedule = "<div class='progressBar' style='margin-left: 10px;'><div class='progressLow" + last + "";
                        }
                        var html = "<span class='progressbar-num'>" + levelNum + "</span>" + schedule;
                        if (Num == 0) {
                            schedule = "<div class='progressBar' style='margin-left: 10px;'><div class='progressOther'></div></div>";
                            html = "<span class='progressbar-num'>其他</span>" + schedule;
                        }
                        return html;
                    }
                },
                {
                    title: '修复版本',
                    align: 'center',
                    field: 'bug_fix_version',
                },
                {
                    title: '修复日期',
                    align: 'center',
                    field: 'bug_fix_date',
                    formatter: function(value) {
                        if(value){
                            return value.split('T')[0];
                        }
                    }
                },
                {
                    title: '',
                    align: 'center',
                    field: 'bug_url',
                    formatter:function (value, row, index) {
                        var cls, text;
                        text = row.triggerflag === "true" ? "查看修复详情" : "查看漏洞详情";
                        cls = row.triggerflag === "true" ? "purple" : "user-management";
                        return "<a class='" + cls + "' target='_blank'>" + text + "</a>";
                    }
                }
            ],
            responseHandler: function(res){
                if(res.rows){
                    for(var i=0; i<res.rows.length; i++){
                        res.rows[i] = transformObjKey(res.rows[i], '_');
                    }
                }
                res.total = res.rowsSize || 0;
                delete res.rowsSize;
                return res;
            },
            onClickCell: function(field, value, row, $element) {
                if(field === 'bug_url'){
                    value = value || "#";
                    window.location.href = value;
                }else{
                    window.location.href = "affected-projects.html?bugID=" + row["bug_id"];
                }
            }
        })
    }
    // bug表格刷新
    function BugTableRefresth() {
        $('#ModuleBugTable').bootstrapTable('refresh', { pageNumber: 1 })
    }
